---
- name: Install Docker and Kubernetes on RHEL 8
  hosts: all
  become: true
  tasks:
    - name: Temporarily disable SELinux
      command: setenforce 0
      ignore_errors: yes

    - name: Permanently disable SELinux
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'
    
    - name: Disable swap temporarily
      command: swapoff -a
      ignore_errors: true  # In case swap is already off

    - name: Permanently disable swap by commenting out swap entry in /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*'
        line: '#\0'  # Comment out any swap entry
        backup: yes

    # Add Docker repository
    # - name: Add Docker repository
    #   yum_repository:
    #     name: docker-ce
    #     description: Docker CE Stable - RHEL 8
    #     baseurl: https://download.docker.com/linux/centos/8/aarch64/stable
    #     enabled: yes
    #     gpgcheck: yes
    #     gpgkey: https://download.docker.com/linux/centos/gpg

    # # Install Docker
    # - name: Install Docker
    #   yum:
    #     name:
    #       - docker-ce
    #       - docker-ce-cli
    #       - containerd.io
    #     state: present
    
    # - name: Enable CRI plugin for containerd
    #   lineinfile:
    #     path: /etc/containerd/config.toml
    #     regexp: '^disabled_plugins.*'
    #     line: '# \0'
    #     backup: yes

    # - name: DEVMODE Set storage driver to fuse-overlayfs for containerd
    #   blockinfile:
    #     dest: /etc/containerd/config.toml
    #     block: |
    #       [plugins."io.containerd.grpc.v1.cri".containerd]
    #         snapshotter = "fuse-overlayfs"

    #       [plugins."io.containerd.snapshotter.v1.overlayfs"]
    #         snapshotter = "fuse-overlayfs"

    #       [plugins."io.containerd.snapshotter.v1.devmapper"]
    #         enabled = false

    # # Start Docker
    # - name: Start Docker service
    #   systemd:
    #     name: docker
    #     state: started
    #     enabled: yes


    - name: Creates k8s and containerd files
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /root/.kube/
        - /opt/cni/bin
        - /etc/containerd

    - name: Unarchive containerd files
      unarchive: 
          src: "{{ item.src }}" 
          dest: "{{ item.dest }}"
      loop:
        - { src: containerd-2.0.1-linux-amd64.tar.gz, dest: /usr/local }
        - { src: cni-plugins-linux-amd64-v1.6.1.tgz, dest: /opt/cni/bin }
        - { src: nerdctl-2.0.2-linux-amd64.tar.gz, dest: /usr/local/bin }

    - name: Copy containerd files
      copy: 
          src: "{{ item.src }}" 
          dest: "{{ item.dest }}"
          mode: "{{ item.mode }}"
      loop:
        - { src: runc.amd64, dest: /usr/local/sbin/runc, mode: "0755" }
        - { src: containerd.service, dest: /etc/systemd/system/containerd.service, mode: "0755" }

    - name: DEVMODE copy /etc/hosts
      copy:
         src: /etc/hosts
         dest: /etc/hosts

    - name: DEVMODE disable firewalld
      service:
              name: firewalld
              state: stopped
              enabled: false

    - name: Set sysctl ip forward setting
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present
        reload: yes

    - name: Load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present
        persistent: present
        

    - name: Set sysctl bridged packets to iptables setting
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present
        reload: yes

          #    - name: DEVMODE Set storage driver to fuse-overlayfs for containerd
          #      copy:
          #        dest: /etc/containerd/config.toml
          #        content: |
          #          [plugins."io.containerd.grpc.v1.cri".containerd]
          #            snapshotter = "fuse-overlayfs"
          #
          #          [plugins."io.containerd.snapshotter.v1.overlayfs"]
          #            snapshotter = "fuse-overlayfs"
          #
          #          [plugins."io.containerd.snapshotter.v1.devmapper"]
          #            enabled = false

    - name: Start containerd
      systemd:
        state: started
        enabled: yes
        name: containerd
        daemon_reload: yes

    # TODO: Need updated OS for newer k8s
    # Install Kubernetes repositories
    - name: Add Kubernetes repository
      yum_repository:
        name: kubernetes
        description: Kubernetes Repository
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.32/rpm/
        enabled: yes
        gpgcheck: yes
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.32/rpm/repodata/repomd.xml.key
        # PRODMODE k8s has a different upgrade procedure so these packages should not upgrade with yum udpate
        # exclude: kubelet kubeadm kubectl cri-tools kubernetes-cni
  
    # baseurl found from: https://mirrors.rockylinux.org/mirrorlist?arch=aarch64&repo=rocky-devel-8.10
    #- name: Add Rocky Devel repository
    #  yum_repository:
    #    name: rocky-devel
    #    description: Rocky Linux 8 - Devel
    #    baseurl: http://mirror.netzwerge.de/rocky-linux/8.10/devel/aarch64/os/
    #    enabled: yes
    #    gpgcheck: no

    # Install Kubernetes components (kubeadm, kubelet, kubectl)
    - name: Install Kubernetes packages
      yum:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - iproute-tc
        state: present

    - name: DEVMODE Tolerate swap in kubelet
      lineinfile:
        path: /etc/sysconfig/kubelet
        regexp: '^KUBELET_EXTRA_ARGS=.*'
        line: 'KUBELET_EXTRA_ARGS=--fail-swap-on=false'
        backup: yes

    # Start and enable kubelet
    - name: Start and enable kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes

- name: Initialize Kubernetes Master
  hosts: master
  become: true
  tasks:
    # Initialize kubeadm on master node
    - name: Initialize Kubernetes Master node using kubeadm
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=Swap
      register: kubeadm_init

    - name: DEVMODE Kubeadm init debug stdout
      debug:
        msg: "{{ kubeadm_init.stdout_lines }}"

    - name: DEVMODE Kubeadm init debug stderr
      debug:
        msg: "{{ kubeadm_init.stderr_lines }}"

    - name: Copy kubeadm generated admin config for kubectl
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    # Apply pod network (Flannel in this case)
    #- name: Apply Flannel CNI network
    #  command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
    #


    - name: Apply Calico CNI network
      command: |
              kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/tigera-operator.yaml
              kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/custom-resources.yaml

    - name: Get join command from master
      command: kubeadm token create --print-join-command
      register: kubeadm_join

- name: Join Worker Nodes to Kubernetes Cluster
  hosts: workers
  become: true
  tasks:
    - name: DEVMODE Debug hostvars
      debug:
              var: hostvars

    # Join the worker nodes to the cluster (using the join command from master)
    - name: Join the Kubernetes worker node to the cluster
      command: "{{ hostvars['master1']['kubeadm_join'].stdout_lines[-1] }}"
      when: hostvars['master1']['kubeadm_join'] is defined

